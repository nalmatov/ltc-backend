import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import requests
import json
import asyncio

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "8012582540:AAHAY-3RAQXAnO1jck3EUpypdEQyK2vGG80"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
API_BASE_URL = "http://185.43.222.207/api/"  # URL –≤–∞—à–µ–≥–æ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
ADMIN_IDS = [1726076180, 6463740595, 1038789342]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (Finite State Machine)
class ExchangeForm(StatesGroup):
    CHOOSE_ACTION = State()
    ADD_EXCHANGE_NAME = State()
    ADD_EXCHANGE_PRICE_PERCENT = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü—ã
    ADD_EXCHANGE_VOLUME = State()
    ADD_EXCHANGE_DEPTH_PLUS = State()
    ADD_EXCHANGE_DEPTH_MINUS = State()
    ADD_EXCHANGE_VOLUME_PERCENTAGE = State()
    ADD_EXCHANGE_ICON = State()
    UPDATE_EXCHANGE_CHOOSE = State()
    UPDATE_EXCHANGE_FIELD = State()
    UPDATE_EXCHANGE_VALUE = State()

# –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
UPDATE_FIELDS = {
    "price_percent": "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–Ω—ã Binance",
    "volume24h": "–û–±—ä–µ–º 24—á",
    "plusTwoPercentDepth": "–ì–ª—É–±–∏–Ω–∞ +2%",
    "minusTwoPercentDepth": "–ì–ª—É–±–∏–Ω–∞ -2%",
    "volumePercentage": "–ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—ä–µ–º–∞",
    "icon": "–ò–∫–æ–Ω–∫–∞"
}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–∏
exchange_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def check_admin(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return False
    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    if not await check_admin(message):
        return

    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∏—Ä–∂—É", callback_data="add")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∏—Ä–∂—É", callback_data="update")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –±–∏—Ä–∂—É", callback_data="delete")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±–∏—Ä–∂", callback_data="list")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏", callback_data="percent_list")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –±–∏—Ä–∂–∞–º–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    await state.set_state(ExchangeForm.CHOOSE_ACTION)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∏—Ä–∂
@dp.callback_query(F.data == "list")
async def list_exchanges(callback: types.CallbackQuery) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∏—Ä–∂"""
    await callback.answer()

    try:
        response = requests.get(f"{API_BASE_URL}/api/custom-exchanges")
        if response.status_code == 200:
            exchanges = response.json()['data']
            if not exchanges:
                await callback.message.reply("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±–∏—Ä–∂ –ø—É—Å—Ç.")
                return

            message = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±–∏—Ä–∂:\n\n"
            for exchange in exchanges:
                message += f"üè¶ <b>{exchange['exchange']}</b>\n"
                message += f"üí∞ –¶–µ–Ω–∞: {exchange['price']}\n"
                message += f"üìä –û–±—ä–µ–º 24—á: {exchange['volume24h']}\n"
                message += f"üìà –ì–ª—É–±–∏–Ω–∞ +2%: {exchange['plusTwoPercentDepth']}\n"
                message += f"üìâ –ì–ª—É–±–∏–Ω–∞ -2%: {exchange['minusTwoPercentDepth']}\n"
                message += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await callback.message.reply(message, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await callback.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏—Ä–∂.")
    except Exception as e:
        await callback.message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–∏
@dp.callback_query(F.data == "add")
async def add_exchange_start(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–∏"""
    await callback.answer()
    
    exchange_data.clear()
    await callback.message.reply("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏:")
    await state.set_state(ExchangeForm.ADD_EXCHANGE_NAME)

@dp.message(ExchangeForm.ADD_EXCHANGE_NAME)
async def add_exchange_name(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏—Ä–∂–∏"""
    exchange_data['exchange'] = message.text
    # –í–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É
    await message.reply("üíπ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –æ—Ç —Ü–µ–Ω—ã Binance (–Ω–∞–ø—Ä–∏–º–µ—Ä: +5 –∏–ª–∏ -3):")
    await state.set_state(ExchangeForm.ADD_EXCHANGE_PRICE_PERCENT)

@dp.message(ExchangeForm.ADD_EXCHANGE_PRICE_PERCENT)
async def add_exchange_price_percent(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü—ã —Ü–µ–Ω—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É LTC —Å Binance
        binance_price = await get_binance_ltc_price()
        if binance_price == 0:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É LTC —Å Binance. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        percent_input = message.text.strip()
        if percent_input.startswith('+'):
            percent = float(percent_input[1:])
        elif percent_input.startswith('-'):
            percent = float(percent_input[1:])
            percent = -percent  # –î–µ–ª–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        else:
            percent = float(percent_input)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
        exchange_data['price_percent'] = percent
        
        # –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Ü–µ–Ω—É
        price = binance_price * (1 + percent / 100)
        
        await message.reply(f"üìä –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —Å Binance: {binance_price:.4f} USDT\n"
                           f"üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º {percent}%: {price:.4f} USDT\n\n"
                           f"üìà –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞ –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000000):")
        await state.set_state(ExchangeForm.ADD_EXCHANGE_VOLUME)
    except ValueError:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ –∑–Ω–∞–∫–æ–º + –∏–ª–∏ -. –ù–∞–ø—Ä–∏–º–µ—Ä: +5 –∏–ª–∏ -3")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

@dp.message(ExchangeForm.ADD_EXCHANGE_VOLUME)
async def add_exchange_volume(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤"""
    try:
        exchange_data['volume24h'] = float(message.text)
        await message.reply("üìà –í–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É +2% –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500000):")
        await state.set_state(ExchangeForm.ADD_EXCHANGE_DEPTH_PLUS)
    except ValueError:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

@dp.message(ExchangeForm.ADD_EXCHANGE_DEPTH_PLUS)
async def add_exchange_depth_plus(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª—É–±–∏–Ω—ã +2%"""
    try:
        exchange_data['plusTwoPercentDepth'] = float(message.text)
        await message.reply("üìâ –í–≤–µ–¥–∏—Ç–µ –≥–ª—É–±–∏–Ω—É -2% –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500000):")
        await state.set_state(ExchangeForm.ADD_EXCHANGE_DEPTH_MINUS)
    except ValueError:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

@dp.message(ExchangeForm.ADD_EXCHANGE_DEPTH_MINUS)
async def add_exchange_depth_minus(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª—É–±–∏–Ω—ã -2%"""
    try:
        exchange_data['minusTwoPercentDepth'] = float(message.text)
        await message.reply("üìä –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ–±—ä–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5):")
        await state.set_state(ExchangeForm.ADD_EXCHANGE_VOLUME_PERCENTAGE)
    except ValueError:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

@dp.message(ExchangeForm.ADD_EXCHANGE_VOLUME_PERCENTAGE)
async def add_exchange_volume_percentage(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ–±—ä–µ–º–∞"""
    try:
        exchange_data['volumePercentage'] = float(message.text)
        await message.reply("üñºÔ∏è –í–≤–µ–¥–∏—Ç–µ URL –∏–∫–æ–Ω–∫–∏ –±–∏—Ä–∂–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(ExchangeForm.ADD_EXCHANGE_ICON)
    except ValueError:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

@dp.message(ExchangeForm.ADD_EXCHANGE_ICON)
async def add_exchange_icon(message: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏–∫–æ–Ω–∫–∏"""
    icon_url = message.text
    if icon_url != '-':
        exchange_data['icon'] = icon_url
    await finish_adding(message, state)

async def finish_adding(message: types.Message, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–∏"""
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/custom-exchanges",
            json=exchange_data
        )
        if response.status_code == 200:
            await message.reply("‚úÖ –ë–∏—Ä–∂–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∏—Ä–∂–∏: {response.text}")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.reply("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    
    await state.clear()

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await message.reply("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.reply("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–∏
@dp.callback_query(F.data == "update")
async def update_exchange_start(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–∏"""
    await callback.answer()

    try:
        response = requests.get(f"{API_BASE_URL}/api/custom-exchanges")
        if response.status_code == 200:
            exchanges = response.json()['data']
            if not exchanges:
                await callback.message.reply("üì≠ –ù–µ—Ç –±–∏—Ä–∂ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                return

            keyboard = []
            for exchange in exchanges:
                keyboard.append([InlineKeyboardButton(
                    text=f"üîÑ {exchange['exchange']}",
                    callback_data=f"update_{exchange['exchange']}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard.append([InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await callback.message.reply(
                "üîç –í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            await state.set_state(ExchangeForm.UPDATE_EXCHANGE_CHOOSE)
    except Exception as e:
        await callback.message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(lambda c: c.data and c.data.startswith("update_"))
async def update_exchange_choose(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –±–∏—Ä–∂–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    await callback.answer()
    
    exchange_name = callback.data.replace("update_", "")
    await state.update_data(current_exchange=exchange_name)

    keyboard = []
    for field_key, field_name in UPDATE_FIELDS.items():
        emoji = "%" if field_key == "price_percent" else "üí∞" if field_key == "price" else "üìä" if field_key == "volume24h" else "üìà" if field_key == "plusTwoPercentDepth" else "üìâ" if field_key == "minusTwoPercentDepth" else "üì±" if field_key == "icon" else "üî¢"
        keyboard.append([InlineKeyboardButton(
            text=f"{emoji} {field_name}", 
            callback_data=f"field_{field_key}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.reply(
        f"üîß –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∏—Ä–∂–∏ <b>{exchange_name}</b>:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    await state.set_state(ExchangeForm.UPDATE_EXCHANGE_FIELD)

@dp.callback_query(lambda c: c.data and c.data.startswith("field_"))
async def update_exchange_field(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    await callback.answer()
    
    field = callback.data.replace("field_", "")
    await state.update_data(update_field=field)
    
    await callback.message.reply(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {UPDATE_FIELDS[field]}:")
    await state.set_state(ExchangeForm.UPDATE_EXCHANGE_VALUE)

@dp.message(ExchangeForm.UPDATE_EXCHANGE_VALUE)
async def update_exchange_value(message: types.Message, state: FSMContext) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
    try:
        user_data = await state.get_data()
        field = user_data['update_field']
        exchange_name = user_data['current_exchange']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ç–∏–ø
        value = message.text
        
        # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–∏
        if field == 'price_percent':
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É LTC —Å Binance
            binance_price = await get_binance_ltc_price()
            if binance_price == 0:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É LTC —Å Binance. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            percent_input = value.strip()
            if percent_input.startswith('+'):
                percent = float(percent_input[1:])
            elif percent_input.startswith('-'):
                percent = float(percent_input[1:])
                percent = -percent  # –î–µ–ª–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
            else:
                percent = float(percent_input)
            
            # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
            field = 'price_percent'
            value = percent
            
            # –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Ü–µ–Ω—É
            price = binance_price * (1 + percent / 100)
            await message.reply(f"üìä –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —Å Binance: {binance_price:.4f} USDT\n"
                              f"üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º {percent}%: {price:.4f} USDT")
        elif field in ['volume24h', 'plusTwoPercentDepth', 'minusTwoPercentDepth', 'volumePercentage']:
            value = float(value)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        response = requests.patch(
            f"{API_BASE_URL}/api/custom-exchanges/{exchange_name}",
            json={field: value}
        )
        
        if response.status_code == 200:
            await message.reply(f"‚úÖ –ë–∏—Ä–∂–∞ {exchange_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏—Ä–∂–∏: {response.text}")
    
    except ValueError:
        await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∏—Ä–∂–∏
@dp.callback_query(F.data == "delete")
async def delete_exchange_start(callback: types.CallbackQuery) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∏—Ä–∂–∏"""
    await callback.answer()

    try:
        response = requests.get(f"{API_BASE_URL}/api/custom-exchanges")
        if response.status_code == 200:
            exchanges = response.json()['data']
            if not exchanges:
                await callback.message.reply("üì≠ –ù–µ—Ç –±–∏—Ä–∂ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return

            keyboard = []
            for exchange in exchanges:
                keyboard.append([InlineKeyboardButton(
                    text=f"‚ùå {exchange['exchange']}",
                    callback_data=f"delete_{exchange['exchange']}"
                )])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard.append([InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await callback.message.reply(
                "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
    except Exception as e:
        await callback.message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(lambda c: c.data and c.data.startswith("delete_"))
async def delete_exchange_confirm(callback: types.CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–∏—Ä–∂–∏"""
    await callback.answer()

    exchange_name = callback.data.replace("delete_", "")
    try:
        response = requests.delete(f"{API_BASE_URL}/api/custom-exchanges/{exchange_name}")
        if response.status_code == 200:
            await callback.message.reply(f"‚úÖ –ë–∏—Ä–∂–∞ {exchange_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await callback.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∏—Ä–∂–∏: {response.text}")
    except Exception as e:
        await callback.message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã LTC —Å Binance
async def get_binance_ltc_price() -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã LTC —Å Binance"""
    try:
        response = requests.get('https://api.binance.com/api/v3/ticker/price', params={'symbol': 'LTCUSDT'})
        if response.status_code == 200:
            data = response.json()
            return float(data['price'])
        else:
            return 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã LTC —Å Binance: {str(e)}")
        return 0

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
@dp.callback_query(F.data == "percent_list")
async def list_exchange_percents(callback: types.CallbackQuery) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –±–∏—Ä–∂"""
    await callback.answer()

    try:
        response = requests.get(f"{API_BASE_URL}/api/custom-exchanges")
        if response.status_code == 200:
            exchanges = response.json()['data']
            if not exchanges:
                await callback.message.reply("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±–∏—Ä–∂ –ø—É—Å—Ç.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É LTC —Å Binance –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            binance_price = await get_binance_ltc_price()
            
            message_text = "üìä –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –±–∏—Ä–∂:\n\n"
            
            for exchange in exchanges:
                exchange_name = exchange['exchange']
                price = float(exchange['price'].replace(',', ''))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                if 'price_percent' in exchange and exchange['price_percent'] is not None:
                    percent = exchange['price_percent']
                    calculated_price = binance_price * (1 + percent / 100) if binance_price > 0 else price
                    
                    # –ó–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                    sign = "+" if percent >= 0 else ""
                    
                    message_text += f"üè¶ <b>{exchange_name}</b>\n"
                    message_text += f"   ‚îú –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: {sign}{percent:.2f}%\n"
                    message_text += f"   ‚îú –¶–µ–Ω–∞ Binance: {binance_price:.4f} USDT\n"
                    message_text += f"   ‚îú –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {calculated_price:.4f} USDT\n"
                    message_text += f"   ‚îî –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price:.4f} USDT\n\n"
                else:
                    message_text += f"üè¶ <b>{exchange_name}</b>\n"
                    message_text += f"   ‚îú –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
                    message_text += f"   ‚îî –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {price:.4f} USDT\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML —Ä–∞–∑–º–µ—Ç–∫–∏
            await callback.message.reply(message_text, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await callback.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏—Ä–∂.")
    except Exception as e:
        await callback.message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∏—Ä–∂—É", callback_data="add")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∏—Ä–∂—É", callback_data="update")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –±–∏—Ä–∂—É", callback_data="delete")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±–∏—Ä–∂", callback_data="list")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏", callback_data="percent_list")]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.reply("üîç –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    await state.set_state(ExchangeForm.CHOOSE_ACTION)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 
